openapi: 3.0.0
info:
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 0.0.1
  title: PostPilotVN - OpenAPI Specification
  description: This is a specification for PostPilot backend - API based on OpenAPI 3.0 specification.
servers:
  - url: https://api.postpilotvn.agency
paths:
  /api/v1/schedule:
    post:
      tags:
        - SocialPost
      operationId: createPost
      summary: Create a new post
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreation'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/200ScheduleSuccessResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalServerError'
  /api/v1/posts:
    get:
      tags:
        - SocialPost
      operationId: getPosts
      summary: Get all posts
      security:
        - bearerAuth: []
      parameters:
        - name: platform
          in: query
          required: false
          schema:
            type: string
            enum:
              - facebook
          description: Platform to filter posts by
        - name: publicationStartDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter posts by publication start date
        - name: publicationEndDate
          in: query
          required: false
          schema:
            type: string
            format: date-time
          description: Filter posts by publication end date
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialPost'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalServerError'
  /api/v1/social-credentials:
    post:
      tags:
        - SocialCredentials
      operationId: createSocialCredential
      summary: Create a new social credential
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialCredentialCreationMultiple'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialCredentialViewModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalServerError'
    get:
      tags:
        - SocialCredentials
      operationId: getSocialCredentials
      parameters:
        - name: platform
          in: query
          schema:
            type: string
            enum:
              - facebook
              - thread
      summary: Get all social credentials
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialCredentialViewModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalServerError'
  /api/v1/social-credentials/{socialCredentialID}:
    parameters:
      - name: socialCredentialID
        in: path
        description: The ID of the social credential
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - SocialCredentials
      operationId: getSocialCredentialInformation
      parameters:
        - name: reload
          in: query
          schema:
            type: boolean
      summary: Get social credentials information
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialCredentialViewModel'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/400BadRequest'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/401Unauthorized'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/500InternalServerError'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Current user access token
  schemas:
    401Unauthorized:
      type: object
      properties:
        message:
          type: string
          example: Unauthorized
        error_code:
          type: string
          example: err_unauthorized
    400BadRequest:
      type: object
      properties:
        message:
          type: string
          example: Bad Request
        error_code:
          type: string
          example: err_bad_request
    500InternalServerError:
      type: object
      properties:
        message:
          type: string
          example: Internal Server Error
        error_code:
          type: string
          example: err_internal_server_error
    Asset:
      type: object
      properties:
        type:
          type: string
          enum:
            - Image
            - Video
          example: Image
        url:
          type: string
          example: https://example.com/image.jpg
    FacebookPost:
      type: object
      properties:
        type:
          type: string
          enum:
            - story
            - reel
            - post
          example: post
        content:
          type: string
          example: Hello, World!
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      required:
        - type
        - content
    TiktokPost:
      type: object
      properties:
        type:
          type: string
          enum:
            - story
            - post
          example: post
        content:
          type: string
          example: Hello, World!
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
      required:
        - type
        - assets
    SocialPostCreation:
      type: object
      properties:
        platform:
          type: string
          enum:
            - facebook
            - tiktok
            - threads
          example: facebook
        socialCredentialID:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        metadata:
          oneOf:
            - $ref: '#/components/schemas/FacebookPost'
            - $ref: '#/components/schemas/TiktokPost'
      required:
        - socialCredentialID
        - platform
        - metadata
    ScheduleCreation:
      type: object
      properties:
        publicationTime:
          type: string
          format: date-time
          example: '2017-07-21T17:32:28Z'
        socialPosts:
          type: array
          items:
            $ref: '#/components/schemas/SocialPostCreation'
      required:
        - publicationTime
        - socialPosts
    200ScheduleSuccessResponse:
      type: object
      properties: {}
    ThreadsPost:
      type: object
      properties:
        type:
          type: string
          enum:
            - carousel
        content:
          type: string
          example: Hello, World!
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    SocialPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        ownerID:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        platform:
          type: string
          enum:
            - facebook
            - tiktok
            - threads
          example: facebook
        status:
          type: string
          enum:
            - published
            - scheduled
            - failed
          example: scheduled
        publicationTime:
          type: string
          format: date-time
          example: '2021-01-01T00:00:00Z'
        socialCredentialID:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        metadata:
          oneOf:
            - $ref: '#/components/schemas/FacebookPost'
            - $ref: '#/components/schemas/TiktokPost'
            - $ref: '#/components/schemas/ThreadsPost'
      required:
        - platform
        - metadata
        - id
        - ownerID
        - socialCredentialID
    FacebookPageCredentialViewModel:
      type: object
      properties:
        page_id:
          type: string
          description: Facebook page ID
        page_name:
          type: string
          description: Facebook page name
    ThreadsCredentialViewModel:
      type: object
      properties:
        username:
          type: string
          description: Threads username
        id:
          type: string
          description: Threads ID
        threads_profile_picture_url:
          type: string
          description: Threads profile picture URL
    FacebookPageMetadataViewModel:
      type: object
      properties:
        page_id:
          type: string
          description: Facebook page ID
        page_name:
          type: string
          description: Facebook page name
        fan_count:
          type: number
          description: Facebook amount of likes
        picture:
          type: object
          properties:
            height:
              type: number
            width:
              type: number
            url:
              type: string
    SocialCredentialViewModel:
      type: object
      properties:
        id:
          type: string
          description: Social credential ID
          format: uuid
        ownerID:
          type: string
          description: User ID
        platform:
          type: string
          description: Social platform
        credential:
          type: object
          description: Social credential
          oneOf:
            - $ref: '#/components/schemas/FacebookPageCredentialViewModel'
            - $ref: '#/components/schemas/ThreadsCredentialViewModel'
        metadata:
          type: object
          description: Social metadata
          oneOf:
            - $ref: '#/components/schemas/FacebookPageMetadataViewModel'
      required:
        - id
        - ownerID
        - platform
        - credential
    FacebookPageCredentialCreation:
      type: object
      properties:
        page_id:
          type: string
          description: Facebook page ID
        page_name:
          type: string
          description: Facebook page name
        access_token:
          type: string
          description: Facebook page access token
      required:
        - page_id
        - page_name
        - access_token
    ThreadsCredentialCreation:
      type: object
      properties:
        code:
          type: string
          description: Threads API code
        redirectURI:
          type: string
          description: RedirectURI at authorization redirection phase
      required:
        - code
        - redirectURI
    SocialCredentialCreation:
      type: object
      properties:
        platform:
          type: string
          description: Social platform
          enum:
            - facebook
            - threads
        credential:
          type: object
          description: Social credentials
          oneOf:
            - $ref: '#/components/schemas/FacebookPageCredentialCreation'
            - $ref: '#/components/schemas/ThreadsCredentialCreation'
      required:
        - platform
        - credential
    SocialCredentialCreationMultiple:
      type: array
      items:
        $ref: '#/components/schemas/SocialCredentialCreation'
